homologous availableなコードを作成する。
基本的には、homologous を利用した塩基対確率を与えることが目的となる。
---
contrafoldとmccaskillに投げるところを、contrafoldHomに投げるように変えればいいのかな。
--
engineは配列に対しての確率行列モデル
engine_aはアラインメントに対しての確率行列モデル
--------
入力から順番に変更します
---
入力後のAln, Fastaの格納コードを書いた。
---
入力のオプションを追加した。
このままだと配列名の部分もT->Uが適用されてしまうな
---
alifoldをhomfoldにした。
---
centroid_homfoldからコードを移行した。
---
ggoファイルを書く。必要な引数は、engin_alnとengine
inputの配列の順番:fa1 aln1 fa2 aln2の順番
---
engine_alnのデフォルト値はCONTRAlign
---
コード変更。~HomModelのオブジェクトを2個作る必要がある。
2個作り、それをsolve関数に渡した。solve関数の引数も変更した。
---
homfold関数に投げるところまで書いた。この中身は変更する必要がないだろう。
---
ハイブリダイゼーションの確率はアラインメントを利用していないが、とりあえずこれでやってみよう。
---
automakeを編集した。
---
make.コンパイル開始。
---
まだ出力コードを書いてない。
出力はそのままでいいのか。
---
コンパイルエラーを見てコードを治していく。
---
automakeの書き方。
サブディレクトリの中の書き方がよくわからない。
---
名前の重複を放置した。
これを修正するには、
まずサブディレクトリないで
lib~.aを作る命令をMakefile.amに書いて、
それを上の階層のMakefile.amに吸収させる。
---
engine_aでエラー、ほかコンパイル開始した。
---
hom版のfolding_eigineのコンストラクタを読み始めた
---
ractIPのリファレンスを見て、どんなデータがあるのかみてみよう。
// target sequence and its homologous sequences (for CentroidHomfold)
class TH : public std::pair<std::string, std::vector<std::string> >
{
 public:
  TH (const std::string& seq, const std::vector<std::string>& hom) 
    {
      this->first = seq;
      this->second = hom;
    }
  uint size () const { return this->first.size(); }
};

THの定義はこれ
すこし修正するほうがいいかな？
foldを走らせないと外側からは触れなさそう.
calculateposteriorの使われ方を見てみよう

calculateposteriorに投げる引数の型をTHに変更し、
引数をTHでラップした。
THでのラップの仕方は
TH (const std::string& seq, const std::vector<std::string>& hom) 
    {
      this->first = seq;
      this->second = hom;
    }

---
transBPの書き換えを行った（引数の書き換え）
---
hom_seqs
ファイルポインタの扱い
---
  std::vector<std::string> engine;
---
homのalnのengineの扱いってどうなってるんだろう
（引数のオプションのCONTRAlignから思った）
もしかして、昔のモデルを使ってるのかもしれない
とりあえず書いたら、検証して、リファクタリングしよう。
---
  bool
  load(BOOST_SPIRIT_CLASSIC_NS::file_iterator<>& fi);
こういうのおもしろいね.
---
engineを１つしか選べないようにして、
std::vector<std::string>からstd::stringに型を変更した影響が出た。
もとにもどしてリストのgengetoptでの受け取り方をしらべるか、
このさきを書き換えてstringでも動くようにするか考えよう。
それか、オプション選択機能をオフにしてもよい。

=>
vectorに戻す。
gengetoptの使い方がわからないので、
とりあえずオプションは付けない。
centroid_homfoldとオプションの付け方に互換性があるといいので、
centroid_homfoldを少し覗いてみる。
---
max_bp_dist
その他デフォルトを用いるようにコンストラクタを使った
---
THのconstructorの使い方を間違えているようだ
class TH : public std::pair<std::string, std::vector<std::string> >
{
 public:
  TH (const std::string& seq, const std::vector<std::string>& hom) 
    {
      this->first = seq;
      this->second = hom;
    }
  uint size () const { return this->first.size(); }
};

である
Alnでは
  const std::list<std::string>& seq() const { return seq_; }
であるから、listからvectorへの変換を行なった。
-
  std::replace(aln1.se人であんまりまずいけどq().begin(), aln1.seq().end(), 't', 'u');
は間違い。引数がtemplate型を継承していない。他にね私がなければ
alnに含まれるstringを一つ一つreplaceする。したがって
----
そもそもseq()の返り値はconst値なので修正できない。したがって、
別のやり方を考えたほうがよさそう。
centroid_homfoldでどうやっているのか調べる。
->なぜかcentroid_homfoldでは動いている
わからない、const修飾の仕様を読みたい
とりあえずcentroid_homfold形式でやってしまう。
---
Undefined symbols for architecture x86_64:
  "McCaskillHomModel::McCaskillHomModel(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, unsigned int, char const*, unsigned int, bool)", referenced from:
      RactIP::run() in ractip_hom.o
  "Aln::load(std::__1::list<Aln, std::__1::allocator<Aln> >&, char const*)", referenced from:
      RactIP::run() in ractip_hom.o
  "RactIP::change_l_v(std::__1::list<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >) const", referenced from:
      RactIP::run() in ractip_hom.o
---
linkがうまくいかない
automake周りを確認する。
---
#ifdef HAVE_LIBRNA
HAVE_LIBRNAは定義されているか
---
Makefile.amの中に\がかけているところがあったので修正した。
---
階層的にMakefile.amを書く方法を調べる。
---
wrapper.cpp:
#include "Defaults.ipp"
#include "InferenceEngine.hpp"
#include "ParameterManager.hpp"
---
名前空間が衝突した。サブディレクトリにライブラリを作らなければならない。
---
contralign完了
probconsRNAのためのMakefile.amも終わった
lib~.aを作って、AC_PROG_RANLIBのフラグをたてることによってできる。
---
change_l_vが起こられている。
Undefined symbols for ~

---

--1305-- ./ractip_hom:
--1305-- dSYM directory is missing; consider using --dsymutil=yes
==1305== Invalid read of size 8
==1305==    at 0x10006223F: CONTRALIGN::SparseMatrix<float>::SparseMatrix(float const*, int, int, float) (in ./ractip_hom)
==1305==    by 0x100062A17: McCaskillHomModel::calculate_posterior(TH const&) (in ./ractip_hom)
==1305==    by 0x100000F9B: RactIP::homfold(TH const&, std::__1::vector<float, std::__1::allocator<float> >&, std::__1::vector<int, std::__1::allocator<int> >&, std::__1::vector<std::__1::vector<float, std::__1::allocator<float> >, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float> > > >&, FoldingEngine<TH>*) const (in ./ractip_hom)
==1305==    by 0x1000030D4: RactIP::solve(TH&, TH&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, FoldingEngine<TH>*, FoldingEngine<TH>*) (in ./ractip_hom)
==1305==    by 0x100006F46: RactIP::run() (in ./ractip_hom)
==1305==    by 0x1000080A3: main (in ./ractip_hom)
==1305==  Address 0x100383798 is 0 bytes after a block of size 5,624 alloc'd
==1305==    at 0x70CB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1305==    by 0x1A928D: operator new(unsigned long) (in /usr/lib/libc++.1.dylib)
==1305==    by 0x10000C3E2: std::__1::vector<float, std::__1::allocator<float> >::__append(unsigned long) (in ./ractip_hom)
==1305==    by 0x1000673D8: CONTRALIGN::CONTRAlign<float>::Impl::ComputePosterior(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<float, std::__1::allocator<float> >&, float) (in ./ractip_hom)

---
コンパイラのバグを踏んでいるような気がしてならない
とりあえず、該当箇所をチェックして、何が起こっているのかを調べる。
--
    CONTRALIGN::SparseMatrix<float>* bp2 = NULL;
    pf_fold (bp2, hom[n], "", 0.01, param_);// Error at this point
----
バグが出た。ここを修正します。
(lldb) run gca_bovine.fasta sample.clustal gca_bovine2.fasta sample-2.clustal
Process 1494 launched: '../src/ractip_hom' (x86_64)
marker message
marker message
Process 1494 stopped
* thread #1: tid = 0x12462, 0x00000001000620a3 ractip_hom`SparseMatrix(this=0x00007fff5fbfef20, rhs=0x0000000100700980, (null)=25173168) + 339 at SparseMatrix.ipp:359, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0xb5bf0ecc)
    frame #0: 0x00000001000620a3 ractip_hom`SparseMatrix(this=0x00007fff5fbfef20, rhs=0x0000000100700980, (null)=25173168) + 339 at SparseMatrix.ipp:359
   356 	    {
   357 	        for (SparseMatrixEntry<T> *ptr = rhs.row_ptrs[i]; ptr != rhs.row_ptrs[i+1]; ++ptr)
   358 	        {
-> 359 		  ++(row_size[ptr->column]);// This line makes error.
   360 	        }
   361 	        
   362 	    }

--
SparseMatrix.ippでエラー
SparseMatrix.ippでエラーが起きるのはおかしい
centroid_homfoldでは動いているのだから。。。
・centorid_homfoldでどのように投げているか見る。
・もっと深くbtしてみる
    CONTRALIGN::SparseMatrix<float>* bp2 = NULL;<110>
    pf_fold (bp2, hom[n], "", 0.01, param_);// Error at this point
ここが原因
pf_fold関数のなかでbp2に禁止した方法で渡している。
---x
const std::string fa1_seq=fa1.seq();
  const std::vector<std::string> aln1_seq = change_l_v(aln1.seq());
  const std::string fa2_seq=fa2.seq();
  const std::vector<std::string> aln2_seq = change_l_v(aln2.seq());
  TH th1_ = TH(fa1_seq, aln1_seq);
  TH th2_ = TH(fa2_seq, aln2_seq);
  float ea = solve(th1_, th2_, r1, r2, cf1, cf2);// here comes the error

change_l_vが失敗しているのではないか
---
	  ++(row_size[ptr->column]);// This line makes error.
ptrは
SparseMatrixEntry<T> *ptr = rhs.row_ptrs[i];
ptr->columnとは
namespace CONTRALIGN {
template<class T>
struct SparseMatrixEntry
{
    int column;
    T value;
ptr->columnがrows+1を超えてしまってメモリアクセス違反を起こしている。
rhs.row_ptrsがおかしいのかな？
rhsは僕が渡したやつだ。

バグが出る場所が二箇所ある。
rhsの渡し方に注意。

    
    for (int i = 0; i < rhs.rows; i++)
    {
        for (SparseMatrixEntry<T> *ptr = rhs.row_ptrs[i]; ptr != rhs.row_ptrs[i+1]; ++ptr)
        {
            row_ptrs[ptr->column]->column = i;
            row_ptrs[ptr->column]->value = ptr->value;
            ++(row_ptrs[ptr->column]);
        }
    }


    std::fill(row_size, row_size+rows+1, 0);  
    for (int i = 0; i < rhs.rows; i++)
    {
        for (SparseMatrixEntry<T> *ptr = rhs.row_ptrs[i]; ptr != rhs.row_ptrs[i+1]; ++ptr)
        {
	  ++(row_size[ptr->column]);// This line makes error.
        }
        
    }

template<class T>
SparseMatrix<T>::SparseMatrix(const SparseMatrix &rhs, ConversionType) :
    rows(rhs.cols), cols(rhs.rows), entries(rhs.entries), zero(rhs.zero)
{

コンストラクタに渡す引数rhsを間違えているのかな。引数をチェック。
pf_foldから呼び出されている？backtraceしてチェック。


